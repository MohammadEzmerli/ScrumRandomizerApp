@using ScrumRandomizerApp.Scrum.Interfaces
@using ScrumRandomizerApp.Scrum.Repositories
@using ScrumRandomizerApp.Scrum

@inject IScrumParticipantRepository scrumParticipantRepository

<Microsoft.MobileBlazorBindings.Elements.Grid HorizontalOptions="LayoutOptions.FillAndExpand" VerticalOptions="LayoutOptions.FillAndExpand">

    @foreach (var item in PossibleScrumParticipants.OrderBy(p => p.Name))
    {
        <Microsoft.MobileBlazorBindings.Elements.GridCell Row="@row" Column="@column">
            <Microsoft.MobileBlazorBindings.Elements.StackLayout Margin=" new Thickness(25)">
                <Microsoft.MobileBlazorBindings.Elements.CheckBox Color="Color.Purple" HorizontalOptions="LayoutOptions.Center" IsChecked="@item.IsParticipating" IsCheckedChanged="@UpdateItem(item)" />
                <Microsoft.MobileBlazorBindings.Elements.Label Text="@item.Name" TextColor="Color.Black" HorizontalTextAlignment="TextAlignment.Center" />
            </Microsoft.MobileBlazorBindings.Elements.StackLayout>
        </Microsoft.MobileBlazorBindings.Elements.GridCell>
        column++;
        if (column % 3 == 0)
        {
            row++;
            column = 0;
        }
    }

</Microsoft.MobileBlazorBindings.Elements.Grid>
<Microsoft.MobileBlazorBindings.Elements.Button Text="Start Scrum" OnClick="@OpenScrumRandomizerComponent">

</Microsoft.MobileBlazorBindings.Elements.Button>
@code {
    List<ScrumParticipant> PossibleScrumParticipants = new List<ScrumParticipant>();
    protected override async Task OnInitializedAsync()
    {
        PossibleScrumParticipants = scrumParticipantRepository.GetScrumParticipants();
    }

    private async Task OpenScrumRandomizerComponent()
    {
        await Task.Delay(1);
    }

    private EventCallback UpdateItem(ScrumParticipant item)
    {
        PossibleScrumParticipants.Where(p => p.Id == item.Id).FirstOrDefault().IsParticipating = !item.IsParticipating;
        return EventCallback.Empty;
    }


    int row = 0;
    int column = 0;
}